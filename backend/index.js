require("dotenv").config(); //This makes your content in .env file available to node.js
const connectToMongo = require("./db");
connectToMongo();

var cors = require("cors");
const path = require("path");

const express = require("express");
const app = express();
const port = 3001;

app.use(cors());
app.use(express.json());

const multer = require("multer");

// const storage = multer.memoryStorage(); // Store files in memory as buffers
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "../frontend/public/uploads/");
  },
  filename: (req, file, cb) => {
    // Use the original file name with a timestamp to avoid overwriting files with the same name
    const timestamp = Date.now();
    const originalname = path.parse(file.originalname).name;
    const extname = path.extname(file.originalname);
    const filename = `${originalname}-${timestamp}${extname}`;
    cb(null, filename);
  },
});

const upload = multer({ storage });
app.use("/MyProducts", express.static("uploads"));

const Product = require("./models/Products");
const fetchuser = require("./middleware/fetchUser");

app.get('/', function (req, res) {
  res.send("Hello World")
});

app.use("/auth", require("./routes/auth"));
app.use("/api", require("./routes/api"));
app.use("/payment", require("./routes/payment"));
app.use("/maps", require("./routes/hospMapRoutes"))

app.post("/addProduct", fetchuser, upload.single("image"), async (req, res) => {
  try {
    if (!req.file) {
      console.error("No file uploaded.");
      return res.status(400).json({ error: "No file uploaded" });
    }
    // Create a new Product document and save it to MongoDB
	console.log("HEYY")
    const product = await Product.create({
      user: req.user,
      prodName: req.body.prodName,
      description: req.body.description,
      price: req.body.price,
      category: req.body.category,
      image: req.file.filename, // Use the new filename generated by multer
    });
    console.log(req.file.path);
    res.json(product);
  } catch (error) {
    console.log("HEYY-ERROR:", error);
    res.status(500).json({ error: "Server error" });
  }
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});

